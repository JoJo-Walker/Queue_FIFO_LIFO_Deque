public class TestDeque {

	public static void test() {

		/* A deque (double ended queue) primarily uses the Queue operations that add at a specific location. However, the add, remove, and peek methods must be defined for a Deque, which should have the behavior of a FIFO queue.
		Because there are tests for the super class Queue, only the methods defined in Deque are tested here.
		*/
		System.out.println("\n*************    TestDeque.test     ***************");
		testConstructor();
		testAddPeek();
		testRemove();
		testAddUpToLimit();
		testAddOverLimit();
		System.out.println();
	} // end test()

	public static void testConstructor() {
		System.out.println("\n --- testConstructor() ---");
		Deque queue = new Deque(5);
		if (!queue.isEmpty()) {
			System.out.println("Not Empty at Instantiation.");
		}
		if (0 != queue.numberOfItems()) {
			System.out.println("Constructor. NOI "+queue.numberOfItems()+". Expected 0");
		}
	} // end testConstructor

	public static void testAddPeek() {
		System.out.println("\n--- testAddPeek() ---");
		Deque queue = new Deque(5);
		queue.add(0);
		queue.add(1);
		if (2 != queue.numberOfItems()) {
			System.out.println("Add. NOI "+queue.numberOfItems()+". Expected 2");
		}
		// Deque. Next element to remove is at the head of the list (0).
		if (queue.peek() == null || queue.peek() != 0) {
			System.out.println("Peek is "+queue.peek()+". Expected 0.");
		}
	} // end testAddPeek

	public static void testRemove() {
		System.out.println("\n --- testRemove() --- ");
		Deque queue = new Deque(5);
		for (int i=0; i<5; i++) {
			queue.add(i);
		}
		Integer result = -1;
		for (int i=0; i<4; i++) {
			result = queue.remove();
			if (result == null || result != i) {
				System.out.println("Removed "+result+". Expected "+i);
			}
		}
		if (queue.numberOfItems() != 1) {
			System.out.println("Remove all but 1. NOI "+queue.numberOfItems()+". Expected 1");
		}
	} // end testRemove


	public static void testAddUpToLimit() {
		System.out.println("\n--- testAddUpToLimit() ---");
		Deque queue = new Deque(5);
		for (int i=0; i<5; i++) {
			queue.add(i);
		}
		if (!queue.isFull()) {
			System.out.println("Added to capacity, but not full.");
		}
		if (5 != queue.numberOfItems()) {
			System.out.println("Add To Limit. NOI "+queue.numberOfItems()+". Expected 5");
		}
	} // end testAddUpToLimit


	public static void testAddOverLimit() {
		System.out.println("\n--- testAddOverLimit() ---");
		Deque queue = new Deque(5);
		for (int i=0; i<6; i++) {
			queue.add(i);
		}
		if (queue.numberOfItems() != 5) {
			System.out.println("Added over capacity. NOI "+queue.numberOfItems()+". Expected 5");
		}
	} // end testAddOverLimit

} // end class TestDeque
